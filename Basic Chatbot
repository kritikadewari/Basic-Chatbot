import nltk
import random
import string  # For text processing

# Download necessary NLTK data (only the first time)
nltk.download('punkt')  # Tokenizer
nltk.download('wordnet')  # Lemmatizer

from nltk.stem import WordNetLemmatizer

# Sample corpus for the chatbot to reply from
corpus = """
Hello! How can I help you?
Hi there! I'm a chatbot.
What is your name?
My name is Chatty. I'm here to help you.
How are you doing?
I'm doing great! How can I assist you?
What can you do?
I can chat with you and answer basic questions.
Goodbye!
See you later!
"""

# Preprocessing the corpus
sent_tokens = nltk.sent_tokenize(corpus.lower())  # converts into sentences

# Create the Lemmatizer
lemmatizer = WordNetLemmatizer()

# Function to Lemmatize and normalize text
def LemNormalize(text):
    remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)
    return [lemmatizer.lemmatize(token) for token in nltk.word_tokenize(text.lower().translate(remove_punct_dict))]

# Greeting inputs and responses
GREETING_INPUTS = ("hello", "hi", "greetings", "sup", "what's up", "hey",)
GREETING_RESPONSES = ["hi", "hey", "hello", "I am glad you're talking to me!"]

# Function to check greetings
def greeting(sentence):
    for word in sentence.split():
        if word.lower() in GREETING_INPUTS:
            return random.choice(GREETING_RESPONSES)

# Generate a response using similarity (basic)
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def response(user_response):
    robo_response = ''
    sent_tokens.append(user_response.lower())  # add user input to sentence tokens
    TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')
    tfidf = TfidfVec.fit_transform(sent_tokens)
    vals = cosine_similarity(tfidf[-1], tfidf)
    idx = vals.argsort()[0][-2]
    
    flat = vals.flatten()
    flat.sort()
    req_tfidf = flat[-2]
    
    if req_tfidf == 0:
        robo_response = "I'm sorry! I don't understand you."
    else:
        robo_response = sent_tokens[idx]
    
    sent_tokens.pop()  # remove user input from sentence tokens
    return robo_response

# Chat loop
print("Chatty: Hi! I'm Chatty. Type 'bye' to exit.")

while True:
    user_response = input().lower()
    if user_response != 'bye':
        if user_response in ['thanks', 'thank you']:
            print("Chatty: You're welcome!")
            break
        else:
            if greeting(user_response) is not None:
                print("Chatty:", greeting(user_response))
            else:
                print("Chatty:", response(user_r
